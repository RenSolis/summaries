-------------------------------------- PYTHON BASICS ---------------------------------------

en Python no existen las variables sino la nomenclatura de utilizar =>
  - indicar una constante => NOMBRE_VARIABLE = valor

asignamiento de multiples variables => var1, var2, ... = valor1, valor2, ...

también se puede comparar dos valores con => valor1 is valor2

recibir un valor mediante la consola => input("texto")

imprimir valores en consola => print(valor, valor), cada valor estará separado por un espacio en blanco

ejecutar una librería mediante la terminal => pythonVERSION -m nombreLibreria
  - utilizarlo para empezar un servidor => pythonVERSION -m http.server numero_puerto

cast =>
  - convertir un string a un entero => int(string)
  - convertir un string a un float => float(string)
  - convertir un objeto a un string => str(int|float|boolean)

realizar un comentario => # comentario
  - de múltiples líneas => """ comentario """

listas => son arrays que tienen la posibilidad de aumentar o disminuir de tamaño en medio de la ejecución
  - se pueden obtener los valores también a partir de índices negativos
  - obtener un subconjunto de listas => lista[inicio:fin:saltos] indicando los indices, los saltos son de cada cuanto se toma un elemento
    - si es desde el inicio simplemente => lista[:fin]
    - hasta el final => lista[inicio:]
  - revés de la lista => lista[::-1]
  - ordenar la lista ascendente => list.sort(reverse=False), si se pone el reverse True se ordenará de manera descendente
  - obtener el mayor de la lista => max(lista)
  - obtener el menor de la lista => min(lista)
  - tamaño de la lista => len(lista)
  - comprobar si un elemento se encuentra en la lista => valor in lista # devuelve un booleano
    - también se puede cambiar el valor boolean => valor not in lista # devolverá el boolean contrario
  - obtener el índice de una lista => lista.index(valor)
  - contar cuantos items de mismos valores se tiene en la lista => lista.count(valor)
  - convertir una lista en un string => lista.join(string) # opcionalmente el string será el separador entre los items de la lista

matrices => [[],[]] son listas dentro de una lista

strings => son inmutables, los métodos crean un nuevo string
  - obtener la cantidad de caracteres => len(string)
  - obtener el caracter por índice => string[índice]
    - tiene las mismas características que una lista => string[inicio:fin:saltos]
  - separar un string en una lista => string.split(filtro) # el filtro un string
  - crear un string de multiple lineas => objeto = """ varias lineas """
  - convert un string en una lista separandola por lineas => string.splitlines()
  - poner un string con letra capital => string.capitalize()
  - poner todos los caracteres al contrario del case que tiene => string.swapcase()
  - todo el string en mayúscula => string.upper()
  - todo el string en minúscula => string.lower()
  - comprobar si el texto se encuentra en solo mayúsculas => string.isupper()
  - comprobar si el texto se encuentra en solo minúsculas => string.islower()
  - convertir el string a un formato de título => string.title()
  - reemplazar un substring del string => string.replace(substring, otro_string, cantidad_cambios) # la cantidad de cambios es opcional, indica cuantos substrings cambiará
  - eliminar los espacios en blanco de los extremos => texto.strip()
  - crear un string donde las variables dentro de este sean reemplazados => "%s %s ..." %(valor, valor, ...) # se puede utilizar cuantas veces se quiera el %s y se debe indicar la misma cantidad de valores que lo reemplazará
  - insertar valores dentro del string => " {} ".format(valor) # se puede utilizar cuantas veces se quieran los {} y con la misma cantidad para los valores del formato
    - también se puede agregar un nombre al valor que se insertará al string => " {a} ".format(a=valor) # esto hace más preciso cuando agreguemos un valor a cual nos referimos
  - un string no puede concatenarse con otro valor que no sea un string => string + str(valor) # por lo que se necesita hacer un cast para poder concatenar
  - obtener cuantas veces hay un string dentro de otro => string.count(substring)
  - comprobar si un string se encuentra dentro de otro => substring in string # devuelve un boolean
    - también se puede cambiar el valor boolean => substring not in string # devolverá el boolean contrario
  - obtener el index de un substring => string.find(substring) # en caso no se encuentre devolverá un -1
  - comprobar como inicia el string => string.startswith(substring)
  - comprobar como termina el string => string.endswith(substring)

tuple => es una secuencia parecida a una lista
  - crear una tuple => (valor, valor, ...)

dictionary =>
  - comprobar si una key se encuentra en el dictionary => "key" in dictionary
  - obtener el valor de la key sin error cuando no existe => dictionary.get("key") # en caso no exista retorna un None
    - si no se encuentra la key se puede indicar que valor retornar => dictionary.get('key', value)
  - buscar una key y si no lo encuentra que la agregue => dictionary.setdefault('key', valor)
  - obtener todas las keys => dictionary.keys() # nos devuelve un objeto dict_keys con todas las keys, se puede convertir el objeto en otros (list(dict_keys), tuple(dict_keys))
  - obtener todos los valores => dictionary.values() # nos devuelve un objeto dict_values con todos los valores, se puede convertir el objeto en otros (list(dict_values), tuple(dict_values))
  - obtener un objeto donde se agrupen las keys con los values => dictionary.items() # devuelve un objeto dict_items, que se puede convertir en otro objeto (list(dict_items), duple(dict_items))
  - eliminar una key => con una palabra reservada => del dictionary['key']
  - eliminar una key y devolver el valor => dictionary.pop('key')
  - elimnar todas las keys => dictionary.clean()

escribir código dentro como un string => exec("string codigo")

deshabilitar los warnings => requests.packages.urllib3.disable_warnings()

indicar un valor vacío => variable = None # lo toma como falso

valores que son falsos => False, '', [], (), {}, 0, 0.0

iteradores =>
  - condicional de iteración primero => while condicional:
    - ejecutar funcionalidad cuando condición no cumple => else:
  - iteración de cada elemento de un array => for elemento in array:
    - si es una iteracción con dictionary el elemento será la key
    - se puede destructurar los elementos de la coleccion si tiene colecciones dentro (ej: [[], []]), pero generará error si no todos son colecciones y si no todos tiene la misma cantidad de elementos
  - palabras reservadas =>
    - detener la iteración => break
    - detener la iteración actual donde se encuentra y continuar con el siguiente item => continue

- utilizar enumerate para obtener el índice dentro de un array => for indice, valor in enumerate(lista)
  - indicar en que valor empezará el índice => enumerate(lista, numero)

secuencia de números para iterar => range
  - crear una secuencia desde 0 y el número máximo sin contarlo => range(numero_maximo)
  - indicar que se empezará con otro número => range(numero_inicio, numero_maximo)
  - indicar los saltos de la secuencia => range(numero_inicio, numero_maximo, cantidad_salto)
  - NOTA: también se puede empezar con número negativos

condicional en línea de código => valor if condicion else otro_valor

funciones => def nombre_funcion():

-------------------------------------- PYTHON CIBERSECURITY ---------------------------------------

os => librería para manejar el sistema operativo
  - importar librería => import os
  - ejecutar comandos => os.system('comando')

importar librería para el sistema operativo y ejecutar comandos => __import__('os')
  - se puede ejecutar comandos al importar la librería => __import__('os').system('comandos')

habilitar en os el tty => python -c 'import pty;pty.spawn("/bin/sh")'
