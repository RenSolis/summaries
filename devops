====================================================================================================
ANOTACIONES PARA ORDERNAR A PARTIR DE ABAJO

openstack

==================================================================
SERVERLESS

serverless: evolución del diseño de aplicaciones, no servidores a administrar, escalabilidad automatica, pago por uso, alta disponibilidad por defecto
arquitectura monolítica: todos los componentes de software se encuentran acopladas dentro de una aplicación (frontend, backend, etc)
arquitectura de microservicios => componentes desacoplados
aws trusted advisor
aws elastic beanstalk
aws opsworks
ec2 auto-recovering
ec2 containers service
aplicación serverless =>
  fuente del evento (cambios de estados en los datos, peticiones a endpoints, cambios en recursos) => lambda (tambien se pueden usar otros servicios) => acción (base de datos, nube)
lambda => servicio de computo detonado por eventos, sin servidores (microservicio sin servidor)
  componentes =>
    - función
    - evento externo
    - servicio aws lambda
    - ambiente de red para la función
  tiempo de ejecucion =>
    - sincrono, API gateway
    - asincrono, S3 o aws sns
    - basado en evento, cambios como en DynamoDB, amazon kinesis
  ambiente de red de la funcion =>
    - default, ambiente de red
    - customer vcp
  casos de uso lambda =>
    - web
    - backend
    - procesamiento de datos
    - chatbots
    - amazon alexa
    - automatizacion
  unicidad =>
    - abstraccion a nivel codigo/funcion
    - modelo de seguridad (IAM, VPC)
    - modelo de precio, se escribe una logica y se toma el tiempo ejecutando todas las lineas de codigo, ese tiempo de ejecucion es lo que cobra
    - comunidad
    - integracion con los servicios de aws
    - escalabilidad
    - ejecucion basada en eventos
  solo puede guardar en bd, cache o s3 porque es stateless
rol IAM => se indican las politicas y roles
cold start
api gateway =>
  crea un api unificada
  proteccion ddos y throttling para backend
  autenticacion y autorizacion en los requests para el backend
  throttle , meter and monetize api uso por 3rd party-developers
todo el frontend dentro de los assets
aws step functions => orquestacion de como estará organizado el serverless
serverless framework

=======================================
ANOTACIONES AWS GIRL
  amazon sagemaker
    https://www.google.com/search?client=ubuntu&channel=fs&q=amazon+sagemaker&ie=utf-8&oe=utf-8
  aws lambda layer
    https://www.google.com/search?client=ubuntu&channel=fs&q=api+gateway&ie=utf-8&oe=utf-8
  https://github.com/jlhood/tweet-sentiment

primer millon de lambda gratuito

========================================
pasar infraestructura a un solo papel(documento)
  cloudformation
    https://aws.amazon.com/es/cloudformation/

console => clouformation => CFN Template => Stack creado
ansible => CFN Template => Stack creado

ver en events del stack para ver como ha sido creado

https://www.google.com/search?client=ubuntu&channel=fs&q=terraform&ie=utf-8&oe=utf-8

environment instanci applicaiton numero_build

https://github.com/cherrera91/cloudformation
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html

========================================
optimizacion de costos
https://d1.awsstatic.com/whitepapers/architecture/AWS-Cost-Optimization-Pillar.pdf
trusted advisor
  optimizacion de costos, rendimiento, seguridad, tolerancia a fallas, limites de servicios
cost explorer
  reportes de cobertura de instancias reveladas
instancia reservada => suscripcion (cupon de descuento aplicada en forma horaria)
plan de ahorro => modelo de precios flexible para reducir hasta un 72% de los costos de computo

=============================
machine learning en aws

https://aws.amazon.com/es/deepracer/

https://es.wikipedia.org/wiki/Aprendizaje_por_refuerzo

reinforcement learning => es un tipo de aprendizaje automático

deeprace usa PPO

aws robomaker https://aws.amazon.com/es/robomaker/

===========================
kubernetes en aws
https://aws.amazon.com/es/fargate/


